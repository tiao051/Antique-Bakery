@model IEnumerable<MenuItem>
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Antique Cafe - Product Management</title>
    <link rel="stylesheet" href="~/css/manager/managerView.css?v=@DateTime.Now.Ticks">
    <link rel="stylesheet" href="~/css/manager/productManager.css?v=@DateTime.Now.Ticks">
</head>
<body>
    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <div class="cafe-name">Antique Cafe</div>
                <div class="cafe-tagline">your daily energy booster</div>
            </div>

            <div class="admin-profile">
                <div class="admin-avatar">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                        <circle cx="12" cy="7" r="4"></circle>
                    </svg>
                </div>
                <div class="admin-info">
                    <div class="admin-name">MANAGER</div>
                    <div class="admin-role">Cafe Manager</div>
                </div>
            </div>

            <ul class="nav-menu">
                <li class="nav-item">
                    <a href="@Url.Action("Index", "Manager")" class="nav-link">
                        <span class="nav-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <rect x="3" y="3" width="7" height="7"></rect>
                                <rect x="14" y="3" width="7" height="7"></rect>
                                <rect x="14" y="14" width="7" height="7"></rect>
                                <rect x="3" y="14" width="7" height="7"></rect>
                            </svg>
                        </span>
                        Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link">
                        <span class="nav-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path>
                                <line x1="3" y1="6" x2="21" y2="6"></line>
                                <path d="M16 10a4 4 0 0 1-8 0"></path>
                            </svg>
                        </span>
                        Orders
                    </a>
                </li>
                <li class="nav-item">
                    <a href="@Url.Action("ProductList", "Manager")" class="nav-link active">
                        <span class="nav-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"></path>
                                <line x1="7" y1="7" x2="7.01" y2="7"></line>
                            </svg>
                        </span>
                        Products
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link">
                        <span class="nav-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                                <circle cx="9" cy="7" r="4"></circle>
                                <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                                <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                            </svg>
                        </span>
                        Customers
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link">
                        <span class="nav-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <line x1="12" y1="1" x2="12" y2="23"></line>
                                <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
                            </svg>
                        </span>
                        Analytics
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link">
                        <span class="nav-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <line x1="12" y1="1" x2="12" y2="23"></line>
                                <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
                            </svg>
                        </span>
                        Statistics
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link">
                        <span class="nav-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <circle cx="12" cy="12" r="3"></circle>
                                <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
                            </svg>
                        </span>
                        Settings
                    </a>
                </li>
            </ul>

            <div class="footer">
                Â© 2025 Antique Cafe. All rights reserved.
            </div>
        </div>

        <!-- Main content -->
        <div class="main-content">
            <div class="notifications">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path>
                    <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
                </svg>
            </div>

            <div class="content-wrapper">
                <div class="page-header">
                    <h1 class="page-title">Product Management</h1>
                    
                    <div class="action-buttons">
                        <a href="@Url.Action("CreateProduct", "Manager")" class="btn btn-primary">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <line x1="12" y1="5" x2="12" y2="19"></line>
                                <line x1="5" y1="12" x2="19" y2="12"></line>
                            </svg>
                            Add New Product
                        </a>
                    </div>
                </div>

                <!-- Success/Error Messages -->
                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                            <polyline points="22,4 12,14.01 9,11.01"></polyline>
                        </svg>
                        @TempData["SuccessMessage"]
                    </div>
                }

                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-error">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="15" y1="9" x2="9" y2="15"></line>
                            <line x1="9" y1="9" x2="15" y2="15"></line>
                        </svg>
                        @TempData["ErrorMessage"]
                    </div>
                }

                <!-- Products Grid -->
                <div class="products-container">
                    @if (Model != null && Model.Any())
                    {
                        @foreach (var categoryGroup in Model.GroupBy(m => m.Category))
                        {
                            <div class="category-section">
                                <h2 class="category-title">@categoryGroup.Key</h2>
                                
                                @foreach (var subcategoryGroup in categoryGroup.GroupBy(m => m.SubCategory))
                                {
                                    <div class="subcategory-section">
                                        <h3 class="subcategory-title">@subcategoryGroup.Key</h3>
                                        
                                        @foreach (var typeGroup in subcategoryGroup.GroupBy(m => m.Type))
                                        {
                                            <div class="type-section">
                                                <h4 class="type-title">@typeGroup.Key</h4>
                                                <div class="products-grid">
                                                    @foreach (var product in typeGroup)
                                                    {
                                                        <div class="product-card" data-product-name="@product.ItemName">
                                                            <div class="product-image">
                                                                <img src="@product.ItemImg" alt="@product.ItemName" onerror="this.src='/img/placeholder.jpg'">
                                                            </div>
                                                            <div class="product-info">
                                                                <h5 class="product-name">@product.ItemName</h5>
                                                                <div class="product-meta">
                                                                    <span class="product-category">@product.Category</span>
                                                                    <span class="product-type">@product.Type</span>
                                                                </div>
                                                            </div>
                                                            <div class="product-actions">
                                                                <button class="delete-btn" onclick="confirmDelete('@product.ItemName')" title="Delete Product">
                                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
                                                                        <path d="M3 6h18"></path>
                                                                        <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                                                                        <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"></path>
                                                                        <path d="M10 11v6"></path>
                                                                        <path d="M14 11v6"></path>
                                                                    </svg>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <div class="empty-state">
                            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"></path>
                                <line x1="7" y1="7" x2="7.01" y2="7"></line>
                            </svg>
                            <h3>No Products Found</h3>
                            <p>Start by creating your first product to see it here.</p>
                            <a href="@Url.Action("CreateProduct", "Manager")" class="btn btn-primary">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <line x1="12" y1="5" x2="12" y2="19"></line>
                                    <line x1="5" y1="12" x2="19" y2="12"></line>
                                </svg>
                                Create First Product
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="delete-modal-overlay" id="deleteModal">
        <div class="delete-modal">
            <div class="delete-modal-header">
                <div class="delete-modal-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="3,6 5,6 21,6"></polyline>
                        <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"></path>
                        <line x1="10" y1="11" x2="10" y2="17"></line>
                        <line x1="14" y1="11" x2="14" y2="17"></line>
                    </svg>
                </div>
                <h3 class="delete-modal-title">Are you sure?</h3>
                <p class="delete-modal-subtitle">This action cannot be undone</p>
            </div>
            <div class="delete-modal-body">
                <div class="delete-modal-message">
                    <div class="delete-modal-product" id="deleteProductName"></div>
                    <div class="delete-modal-warning">This product will be permanently deleted from the system.</div>
                </div>
            </div>
            <div class="delete-modal-actions">
                <button class="delete-cancel-btn" onclick="closeDeleteModal()">
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                    Cancel
                </button>
                <button class="delete-confirm-btn" id="confirmDeleteBtn" onclick="performDelete()">
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="3,6 5,6 21,6"></polyline>
                        <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"></path>
                        <line x1="10" y1="11" x2="10" y2="17"></line>
                        <line x1="14" y1="11" x2="14" y2="17"></line>
                    </svg>
                    Yes, Delete
                </button>
            </div>
        </div>
    </div>

    <script>
        let productToDelete = '';

        // Auto-hide alerts after 5 seconds
        document.addEventListener('DOMContentLoaded', function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                setTimeout(() => {
                    alert.style.opacity = '0';
                    setTimeout(() => {
                        alert.remove();
                    }, 300);
                }, 5000);
            });
        });

        // Show delete confirmation modal
        function confirmDelete(itemName) {
            productToDelete = itemName;
            document.getElementById('deleteProductName').textContent = itemName;
            
            const modal = document.getElementById('deleteModal');
            modal.classList.add('active');
            
            // Focus management for accessibility
            setTimeout(() => {
                document.getElementById('confirmDeleteBtn').focus();
            }, 300);
        }

        // Close delete confirmation modal
        function closeDeleteModal() {
            const modal = document.getElementById('deleteModal');
            modal.classList.remove('active');
            productToDelete = '';
            
            // Reset button state
            resetButtonState();
        }

        // Helper function to reset button state
        function resetButtonState() {
            const confirmBtn = document.getElementById('confirmDeleteBtn');
            confirmBtn.classList.remove('loading');
            confirmBtn.disabled = false;
            confirmBtn.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <polyline points="3,6 5,6 21,6"></polyline>
                    <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"></path>
                    <line x1="10" y1="11" x2="10" y2="17"></line>
                    <line x1="14" y1="11" x2="14" y2="17"></line>
                </svg>
                Yes, Delete
            `;
        }

        // Perform the actual delete operation
        async function performDelete() {
            if (!productToDelete) return;
            
            const confirmBtn = document.getElementById('confirmDeleteBtn');
            
            // Show loading state
            confirmBtn.classList.add('loading');
            confirmBtn.disabled = true;
            confirmBtn.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <polyline points="3,6 5,6 21,6"></polyline>
                    <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"></path>
                    <line x1="10" y1="11" x2="10" y2="17"></line>
                    <line x1="14" y1="11" x2="14" y2="17"></line>
                </svg>
                Deleting...
            `;
            
            try {
                const response = await fetch('@Url.Action("Delete", "Manager")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: `itemName=${encodeURIComponent(productToDelete)}`
                });

                const result = await response.json();
                
                if (result.success) {
                    // Show success message
                    showAlert('success', result.message);
                    
                    // Remove the product card from UI
                    const productCard = document.querySelector(`[data-product-name="${productToDelete}"]`);
                    if (productCard) {
                        productCard.style.transition = 'all 0.3s ease';
                        productCard.style.transform = 'scale(0)';
                        productCard.style.opacity = '0';
                        
                        setTimeout(() => {
                            productCard.remove();
                            
                            // Check if section is empty and update UI
                            checkEmptyState();
                        }, 300);
                    }
                    
                    closeDeleteModal();
                } else {
                    showAlert('error', result.message);
                    resetButtonState();
                }
            } catch (error) {
                console.error('Error deleting product:', error);
                showAlert('error', 'An error occurred while deleting the product.');
                resetButtonState();
            }
        }

        // Show alert message
        function showAlert(type, message) {
            const alertContainer = document.querySelector('.content-wrapper');
            const alertElement = document.createElement('div');
            alertElement.className = `alert alert-${type}`;
            
            const icon = type === 'success' 
                ? `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                     <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                     <polyline points="22,4 12,14.01 9,11.01"></polyline>
                   </svg>`
                : `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                     <circle cx="12" cy="12" r="10"></circle>
                     <line x1="15" y1="9" x2="9" y2="15"></line>
                     <line x1="9" y1="9" x2="15" y2="15"></line>
                   </svg>`;
            
            alertElement.innerHTML = `${icon}${message}`;
            
            // Insert at the beginning of content wrapper
            const pageHeader = alertContainer.querySelector('.page-header');
            if (pageHeader) {
                alertContainer.insertBefore(alertElement, pageHeader.nextSibling);
            } else {
                alertContainer.insertBefore(alertElement, alertContainer.firstChild);
            }
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                alertElement.style.opacity = '0';
                setTimeout(() => {
                    alertElement.remove();
                }, 300);
            }, 5000);
        }

        // Check if any sections are empty and update UI accordingly
        function checkEmptyState() {
            let totalProductsRemaining = 0;
            
            // Check type sections first (innermost level)
            const typeSections = document.querySelectorAll('.type-section');
            typeSections.forEach(typeSection => {
                const productsGrid = typeSection.querySelector('.products-grid');
                const productCards = productsGrid ? productsGrid.children.length : 0;
                
                if (productCards === 0) {
                    // Remove empty type section
                    typeSection.style.transition = 'all 0.3s ease';
                    typeSection.style.transform = 'scale(0.9)';
                    typeSection.style.opacity = '0';
                    typeSection.style.height = '0';
                    typeSection.style.marginBottom = '0';
                    typeSection.style.overflow = 'hidden';
                    
                    setTimeout(() => {
                        typeSection.remove();
                        checkEmptyParentSections();
                    }, 300);
                } else {
                    totalProductsRemaining += productCards;
                }
            });
            
            // If no products remain at all, show empty state
            if (totalProductsRemaining === 0) {
                setTimeout(() => {
                    const productsContainer = document.querySelector('.products-container');
                    if (productsContainer) {
                        productsContainer.innerHTML = `
                            <div class="empty-state">
                                <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"></path>
                                    <line x1="7" y1="7" x2="7.01" y2="7"></line>
                                </svg>
                                <h3>No Products Found</h3>
                                <p>There are no products in your inventory yet.</p>
                                <a href="@Url.Action("CreateProduct", "Manager")" class="btn btn-primary">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <line x1="12" y1="5" x2="12" y2="19"></line>
                                        <line x1="5" y1="12" x2="19" y2="12"></line>
                                    </svg>
                                    Create First Product
                                </a>
                            </div>
                        `;
                    }
                }, 350);
            }
        }

        // Check and remove empty parent sections (subcategory and category)
        function checkEmptyParentSections() {
            // Check subcategory sections
            const subcategorySections = document.querySelectorAll('.subcategory-section');
            subcategorySections.forEach(subcatSection => {
                const typeSections = subcatSection.querySelectorAll('.type-section');
                if (typeSections.length === 0) {
                    // Remove empty subcategory section
                    subcatSection.style.transition = 'all 0.3s ease';
                    subcatSection.style.transform = 'scale(0.9)';
                    subcatSection.style.opacity = '0';
                    subcatSection.style.height = '0';
                    subcatSection.style.marginBottom = '0';
                    subcatSection.style.overflow = 'hidden';
                    
                    setTimeout(() => {
                        subcatSection.remove();
                        checkEmptyCategorySections();
                    }, 300);
                }
            });
        }

        // Check and remove empty category sections
        function checkEmptyCategorySections() {
            const categorySections = document.querySelectorAll('.category-section');
            categorySections.forEach(catSection => {
                const subcategorySections = catSection.querySelectorAll('.subcategory-section');
                if (subcategorySections.length === 0) {
                    // Remove empty category section
                    catSection.style.transition = 'all 0.3s ease';
                    catSection.style.transform = 'scale(0.9)';
                    catSection.style.opacity = '0';
                    catSection.style.height = '0';
                    catSection.style.marginBottom = '0';
                    catSection.style.overflow = 'hidden';
                    
                    setTimeout(() => {
                        catSection.remove();
                    }, 300);
                }
            });
        }

        // Close modal when clicking outside
        document.getElementById('deleteModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeDeleteModal();
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeDeleteModal();
            }
        });
    </script>
</body>
</html>
