@model highlands.Models.DTO.ItemSelectedViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var filteredMenuItems = ViewBag.MenuItem as MenuItem;
    var availableSizes = Model.AvailableSizes ?? new List<MenuItemPrice>();
    var hasClassicSizes = availableSizes != null && availableSizes.Any(s => s.Size == "S" || s.Size == "M" || s.Size == "L");
    var hasEspressoSizes = availableSizes != null && availableSizes.Any(s => s.Size == "Single Shot" || s.Size == "Double Shot");
}
<body>
    <div class="item">
        <div class="menu-link-wrapper">
            <h3 class="menu-link">
                <a href="@Url.Action("Index", "Customer", new { area = "User" })">Menu</a> /
                @*chưa xong*@ 
                <a href="javascript:void(0);" data-subcategory="@Model.MenuItem.SubCategory">@Model.MenuItem.SubCategory</a> /
                <span class="item-name">@Model.MenuItem.ItemName</span>
            </h3>
        </div>
        <div class="item-container">
            <img class="item-img" src="@Model.MenuItem.ItemImg" alt="@Model.MenuItem.ItemName" />
            <div class="item-content">
                <a class="item-name-track">@Model.MenuItem.ItemName</a>
                @*chưa xong*@ 
                    <h3>30 Calories</h3>
            </div>
        </div>

        <div class="details-container">
            <div class="size-options">
                <h2>Size options</h2>
                <div class="size-buttons">
                    @if (hasClassicSizes)
                    {
                        @foreach (var size in availableSizes.OrderBy(s => s.Size == "S" ? 1 : s.Size == "M" ? 2 : 3))
                        {
                            <button class="size-button @(size.Size == "S" ? "small" : size.Size == "M" ? "medium" : "large")"
                                    data-size="@size.Size"
                                    data-name="@Model.MenuItem.ItemName">
                                <img src="~/img/cup.png" alt="@size.Size">
                                <span class="size-label">@size.Size</span>
                                <span class="size-description">
                                    @(size.Size == "S" ? "12 fl oz" : size.Size == "M" ? "16 fl oz" : "20 fl oz")
                                </span>
                            </button>
                        }
                    }
                    else if (hasEspressoSizes)
                    {
                        @foreach (var size in availableSizes.OrderBy(s => s.Size == "Double Shot"))
                        {
                            if (size.Size == "Single Shot")
                            {
                                <button class="size-button medium" data-size="@size.Size" data-name="@Model.MenuItem.ItemName">
                                    <img src="~/img/cup.png" alt="Single Shot">
                                    <span class="size-label">Single Shot</span>
                                    <span class="size-description">16 fl oz</span>
                                </button>
                            }
                        }
                        @foreach (var size in availableSizes.Where(s => s.Size == "Double Shot"))
                        {
                            <button class="size-button large" data-size="@size.Size" data-name="@Model.MenuItem.ItemName">
                                <img src="~/img/cup.png" alt="Double Shot">
                                <span class="size-label">Double Shot</span>
                                <span class="size-description">20 fl oz</span>
                            </button>
                        }
                    }
                </div>
                <div class="store-availability">
                    <i class="fa-solid fa-location-dot"></i>
                    <a href="#">Select a store to view availability</a>
                </div>
            </div>
            <div class="included-options">
                <h2 id="includedTitle">What's included</h2>
                <div class="ingredients-container">
                    @*load lên size M lúc đầu*@
                    @await Html.PartialAsync("~/Views/User/Customer/_RecipePartial.cshtml", Model.RecipeList)
                </div>

            </div>

        </div>
        <button id="addToOrderBtn" class="btn-add-to-order">Add to Order</button>
    </div>

</body>
<link rel="stylesheet" href="~/css/customer/selected.css?v=@DateTime.Now.Ticks">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://kit.fontawesome.com/a6ec772266.js" crossorigin="anonymous"></script>
<script src="/js/CustomerJS/itemSelected.js" defer></script>
@* <script>
    document.addEventListener("DOMContentLoaded", function () {
        // xu ly chon size
       const sizeButtons = document.querySelectorAll(".size-button");
       // luu gia tri ban dau cua nguyen lieu theo size (để thay đổi cái whats included lại)
       const initialIngredientValues = {};

            document.querySelectorAll(".ingredient-select, .quantity").forEach(element => {
            initialIngredientValues[element.dataset.ingredientId] = element.value || element.textContent;
        });
        // chon mac dinh la 16oz
        function selectDefaultSize() {
            sizeButtons.forEach(btn => btn.classList.remove("selected"));
            const defaultSize = document.querySelector(".size-button.medium");
            if (defaultSize) {
                defaultSize.classList.add("selected");
            }
        }

        sizeButtons.forEach(button => {
        button.addEventListener("click", function () {
            sizeButtons.forEach(btn => btn.classList.remove("selected"));
            this.classList.add("selected");
            console.log(this);

            const selectedSize = this.getAttribute("data-size");
            const itemName = this.getAttribute("data-name");

            fetch(`/Customer/LoadRecipePartial?size=${encodeURIComponent(selectedSize)}&itemName=${encodeURIComponent(itemName)}`,
            {
                method: "GET"
            })
            .then(response => response.text())
            .then(data => {
                document.querySelector(".ingredients-container").innerHTML = data;

                // Sau khi cập nhật nội dung, gán lại event listeners
                attachQuantityControlEvents();
            })
            .catch(error => console.error("Error:", error));
        });
    });

        // load ham
        attachQuantityControlEvents();
        selectDefaultSize();

        // xu ly button tang giam
        function attachQuantityControlEvents() {
        document.querySelectorAll(".quantity-control").forEach(control => {
            const decreaseBtn = control.querySelector(".btn-decrease");
            const increaseBtn = control.querySelector(".btn-increase");
            const quantitySpan = control.querySelector(".quantity");

            const ingredientSection = control.closest(".ingredient-item");
            const ingredientType = ingredientSection?.getAttribute("data-ingredient-type");

            decreaseBtn.addEventListener("click", function () {
                let currentValue = parseFloat(quantitySpan.textContent);

                if (ingredientType === "Main-Pumps") {
                    if (currentValue > 1) {
                        quantitySpan.textContent = (currentValue - 0.5).toFixed(1);
                        updateTitle();
                    }
                }
                else if (ingredientType === "Shots"){
                    if (currentValue > 1) {
                        quantitySpan.textContent = (currentValue - 1).toFixed(1);
                        updateTitle();
                    }
                }
                else {
                    if (currentValue > 0) {
                        quantitySpan.textContent = (currentValue - 0.5).toFixed(1);
                        updateTitle();
                    }
                }
            });

            increaseBtn.addEventListener("click", function () {
                let currentValue = parseFloat(quantitySpan.textContent);
                if (ingredientType === "Main-Pumps") {
                    if (currentValue >= 1) {
                        quantitySpan.textContent = (currentValue + 0.5).toFixed(1);
                        updateTitle();
                    }
                }
                else if (ingredientType === "Shots"){
                    if (currentValue >= 1) {
                        quantitySpan.textContent = (currentValue + 1).toFixed(1);
                        updateTitle();
                    }
                }
                else {
                    if (currentValue > 0) {
                        quantitySpan.textContent = (currentValue + 0.5).toFixed(1);
                        updateTitle();
                    }
                }
            });
        });
    }

    // mục tiêu là lấy được giá trị ban đầu của từng ingredient trong công thức sau đó sẽ so sánh nó có thay đổi với
    // lúc đầu sau khi tăng giảm hoặc thay đổi không. Nếu có thì đổi, ko thì giữ nguyên. Update liên tục
        // // update tieu de theo activities
        // const title = document.getElementById("includedTitle");
        // function updateTitle(){
        //     title.textContent = "Customer Customized";
        // }

        // // theo doi thay doi
        // document.querySelectorAll(".ingredient-select").forEach(select => {
        //     select.addEventListener("change", updateTitle);
        // });
    });
        $(document).ready(function () {
           $("#addToOrderBtn").click(async function () {
        let itemName = $(".item-name-track").text().trim();
        let size = $(".size-button.selected").data("size");
        let itemImg = document.querySelector(".item-img")?.getAttribute("src") || "";

        if (!itemName || !size) {
            alert("Please select an item and size.");
            return;
        }

        console.log("[DEBUG] Add to Order Clicked:", { itemName, size });

        try {
            // Bước 1: Lấy userId
            let userResponse = await $.get("/Customer/GetUserId");

            if (!userResponse.success || userResponse.userId === 0) {
                alert("User not authenticated!");
                return;
            }

            let userId = userResponse.userId;

            // Bước 2: Lấy giá sản phẩm
            let priceResponse = await $.get("/Customer/GetPrice", { itemName, size });

            if (!priceResponse.success) {
                alert("Failed to fetch price.");
                return;
            }

            let price = priceResponse.price;

            // Bước 3: Thêm vào giỏ hàng
            let orderResponse = await $.post("/Customer/AddToOrder", {
                userId,
                itemName,
                size,
                price,
                quantity: 1,
                itemImg
            });

            console.log("[DEBUG] Order Response:", orderResponse);

            if (orderResponse.success) {
                const cartCountElement = document.querySelector('.cart-count');

                if (cartCountElement) {
                    cartCountElement.classList.add('cart-count-animated');

                    setTimeout(() => {
                        cartCountElement.textContent = orderResponse.cartCount;
                    }, 250);

                    setTimeout(() => {
                        cartCountElement.classList.remove('cart-count-animated');
                    }, 500);
                }

                // Bắn event để các nơi khác có thể cập nhật UI
                $(document).trigger("cartUpdated");
            } else {
                alert(orderResponse.message);
            }
        } catch (error) {
            console.error("Error during add to cart:", error);
            alert("An unexpected error occurred!");
        }
    });
    });
</script> *@
